-- WarpahSpectate Pro v5.3
-- Fixed Free Camera Controls
-- Mobile & Desktop Compatible

local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TweenService = game:GetService("TweenService")
local Workspace = game:GetService("Workspace")

local LocalPlayer = Players.LocalPlayer
local Camera = Workspace.CurrentCamera

-- Configuration
local Config = {
    Enabled = false,
    CurrentTarget = nil,
    TargetIndex = 1,
    UI = {},
    IsMinimized = false,
    Connections = {},
    
    -- Camera settings
    CameraAngleX = 0,
    CameraAngleY = 0,
    CameraDistance = 10,
    MinZoom = 3,
    MaxZoom = 100,
    
    -- Smooth values
    CurrentAngleX = 0,
    CurrentAngleY = 0,
    CurrentDistance = 10,
    
    -- Controls
    IsRotating = false,
    LastInputPos = nil,
    MouseSensitivity = 0.005,
    TouchSensitivity = 0.008,
    
    -- Touch zoom
    TouchPoints = {},
    InitialPinchDist = nil,
    InitialZoomDist = nil,
    
    -- Smoothing
    SmoothFactor = 0.2
}

-- Create GUI
local function createGUI()
    local existing = LocalPlayer.PlayerGui:FindFirstChild("WarpahSpectate")
    if existing then existing:Destroy() end
    
    local ScreenGui = Instance.new("ScreenGui")
    ScreenGui.Name = "WarpahSpectate"
    ScreenGui.Parent = LocalPlayer.PlayerGui
    ScreenGui.ResetOnSpawn = false
    ScreenGui.ZIndexBehavior = Enum.ZIndexBehavior.Sibling
    
    local MainFrame = Instance.new("Frame")
    MainFrame.Name = "MainFrame"
    MainFrame.Size = UDim2.new(0, 180, 0, 220)
    MainFrame.Position = UDim2.new(0, 10, 0, 10)
    MainFrame.BackgroundColor3 = Color3.fromRGB(25, 25, 30)
    MainFrame.BorderSizePixel = 0
    MainFrame.Parent = ScreenGui
    
    local MainCorner = Instance.new("UICorner")
    MainCorner.CornerRadius = UDim.new(0, 8)
    MainCorner.Parent = MainFrame
    
    local Border = Instance.new("UIStroke")
    Border.Color = Color3.fromRGB(60, 60, 70)
    Border.Thickness = 1
    Border.Parent = MainFrame
    
    local TitleBar = Instance.new("Frame")
    TitleBar.Size = UDim2.new(1, 0, 0, 24)
    TitleBar.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    TitleBar.BorderSizePixel = 0
    TitleBar.Parent = MainFrame
    
    local TitleCorner = Instance.new("UICorner")
    TitleCorner.CornerRadius = UDim.new(0, 8)
    TitleCorner.Parent = TitleBar
    
    local TitleFix = Instance.new("Frame")
    TitleFix.Size = UDim2.new(1, 0, 0, 12)
    TitleFix.Position = UDim2.new(0, 0, 1, -12)
    TitleFix.BackgroundColor3 = Color3.fromRGB(35, 35, 40)
    TitleFix.BorderSizePixel = 0
    TitleFix.Parent = TitleBar
    
    local TitleText = Instance.new("TextLabel")
    TitleText.Size = UDim2.new(1, -60, 1, 0)
    TitleText.Position = UDim2.new(0, 6, 0, 0)
    TitleText.BackgroundTransparency = 1
    TitleText.Text = "Warpah Spectate"
    TitleText.TextColor3 = Color3.fromRGB(220, 220, 220)
    TitleText.TextSize = 10
    TitleText.Font = Enum.Font.Gotham
    TitleText.TextXAlignment = Enum.TextXAlignment.Left
    TitleText.Parent = TitleBar
    
    local MinimizeBtn = Instance.new("TextButton")
    MinimizeBtn.Size = UDim2.new(0, 16, 0, 16)
    MinimizeBtn.Position = UDim2.new(1, -38, 0, 4)
    MinimizeBtn.BackgroundColor3 = Color3.fromRGB(200, 160, 50)
    MinimizeBtn.Text = "‚Äì"
    MinimizeBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    MinimizeBtn.TextSize = 12
    MinimizeBtn.Font = Enum.Font.GothamBold
    MinimizeBtn.Parent = TitleBar
    
    local MinimizeCorner = Instance.new("UICorner")
    MinimizeCorner.CornerRadius = UDim.new(0, 3)
    MinimizeCorner.Parent = MinimizeBtn
    
    local CloseBtn = Instance.new("TextButton")
    CloseBtn.Size = UDim2.new(0, 16, 0, 16)
    CloseBtn.Position = UDim2.new(1, -20, 0, 4)
    CloseBtn.BackgroundColor3 = Color3.fromRGB(220, 60, 60)
    CloseBtn.Text = "√ó"
    CloseBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    CloseBtn.TextSize = 12
    CloseBtn.Font = Enum.Font.GothamBold
    CloseBtn.Parent = TitleBar
    
    local CloseCorner = Instance.new("UICorner")
    CloseCorner.CornerRadius = UDim.new(0, 3)
    CloseCorner.Parent = CloseBtn
    
    local ContentFrame = Instance.new("Frame")
    ContentFrame.Size = UDim2.new(1, 0, 1, -24)
    ContentFrame.Position = UDim2.new(0, 0, 0, 24)
    ContentFrame.BackgroundTransparency = 1
    ContentFrame.Parent = MainFrame
    
    local ToggleBtn = Instance.new("TextButton")
    ToggleBtn.Size = UDim2.new(1, -12, 0, 22)
    ToggleBtn.Position = UDim2.new(0, 6, 0, 6)
    ToggleBtn.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
    ToggleBtn.Text = "Enable Spectate"
    ToggleBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    ToggleBtn.TextSize = 10
    ToggleBtn.Font = Enum.Font.Gotham
    ToggleBtn.Parent = ContentFrame
    
    local ToggleCorner = Instance.new("UICorner")
    ToggleCorner.CornerRadius = UDim.new(0, 4)
    ToggleCorner.Parent = ToggleBtn
    
    local PlayerListFrame = Instance.new("ScrollingFrame")
    PlayerListFrame.Size = UDim2.new(1, -12, 0, 100)
    PlayerListFrame.Position = UDim2.new(0, 6, 0, 34)
    PlayerListFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    PlayerListFrame.BorderSizePixel = 0
    PlayerListFrame.ScrollBarThickness = 2
    PlayerListFrame.ScrollBarImageColor3 = Color3.fromRGB(100, 100, 100)
    PlayerListFrame.Parent = ContentFrame
    
    local ListCorner = Instance.new("UICorner")
    ListCorner.CornerRadius = UDim.new(0, 4)
    ListCorner.Parent = PlayerListFrame
    
    local ListLayout = Instance.new("UIListLayout")
    ListLayout.SortOrder = Enum.SortOrder.Name
    ListLayout.Padding = UDim.new(0, 1)
    ListLayout.Parent = PlayerListFrame
    
    local ControlsFrame = Instance.new("Frame")
    ControlsFrame.Size = UDim2.new(1, -12, 0, 50)
    ControlsFrame.Position = UDim2.new(0, 6, 0, 140)
    ControlsFrame.BackgroundColor3 = Color3.fromRGB(20, 20, 25)
    ControlsFrame.BorderSizePixel = 0
    ControlsFrame.Parent = ContentFrame
    
    local ControlsCorner = Instance.new("UICorner")
    ControlsCorner.CornerRadius = UDim.new(0, 4)
    ControlsCorner.Parent = ControlsFrame
    
    local PrevBtn = Instance.new("TextButton")
    PrevBtn.Size = UDim2.new(0.32, -1, 0, 18)
    PrevBtn.Position = UDim2.new(0, 3, 0, 3)
    PrevBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 90)
    PrevBtn.Text = "‚óÄ Prev"
    PrevBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    PrevBtn.TextSize = 9
    PrevBtn.Font = Enum.Font.Gotham
    PrevBtn.Parent = ControlsFrame
    
    local NextBtn = Instance.new("TextButton")
    NextBtn.Size = UDim2.new(0.32, -1, 0, 18)
    NextBtn.Position = UDim2.new(0.34, 0, 0, 3)
    NextBtn.BackgroundColor3 = Color3.fromRGB(80, 80, 90)
    NextBtn.Text = "Next ‚ñ∂"
    NextBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    NextBtn.TextSize = 9
    NextBtn.Font = Enum.Font.Gotham
    NextBtn.Parent = ControlsFrame
    
    local ResetBtn = Instance.new("TextButton")
    ResetBtn.Size = UDim2.new(0.34, -2, 0, 18)
    ResetBtn.Position = UDim2.new(0.66, 2, 0, 3)
    ResetBtn.BackgroundColor3 = Color3.fromRGB(100, 150, 80)
    ResetBtn.Text = "Reset"
    ResetBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
    ResetBtn.TextSize = 9
    ResetBtn.Font = Enum.Font.Gotham
    ResetBtn.Parent = ControlsFrame
    
    local InfoLabel = Instance.new("TextLabel")
    InfoLabel.Size = UDim2.new(1, -6, 0, 26)
    InfoLabel.Position = UDim2.new(0, 3, 0, 24)
    InfoLabel.BackgroundTransparency = 1
    InfoLabel.Text = "üñ±Ô∏è Hold & Drag: Rotate\nüîç Scroll/Pinch: Zoom"
    InfoLabel.TextColor3 = Color3.fromRGB(150, 150, 150)
    InfoLabel.TextSize = 7
    InfoLabel.Font = Enum.Font.Gotham
    InfoLabel.TextWrapped = true
    InfoLabel.Parent = ControlsFrame
    
    for _, btn in pairs({PrevBtn, NextBtn, ResetBtn}) do
        local corner = Instance.new("UICorner")
        corner.CornerRadius = UDim.new(0, 3)
        corner.Parent = btn
    end
    
    Config.UI = {
        ScreenGui = ScreenGui,
        MainFrame = MainFrame,
        TitleBar = TitleBar,
        MinimizeBtn = MinimizeBtn,
        CloseBtn = CloseBtn,
        ContentFrame = ContentFrame,
        ToggleBtn = ToggleBtn,
        PlayerListFrame = PlayerListFrame,
        PrevBtn = PrevBtn,
        NextBtn = NextBtn,
        ResetBtn = ResetBtn
    }
    
    return Config.UI
end

-- Dragging
local function makeDraggable(frame, handle)
    local dragging = false
    local dragStart = nil
    local startPos = nil
    
    handle.InputBegan:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = true
            dragStart = input.Position
            startPos = frame.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input)
        if dragging and (input.UserInputType == Enum.UserInputType.MouseMovement or input.UserInputType == Enum.UserInputType.Touch) then
            local delta = input.Position - dragStart
            frame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 or input.UserInputType == Enum.UserInputType.Touch then
            dragging = false
        end
    end)
end

-- Get valid players
local function getValidPlayers()
    local validPlayers = {}
    for _, player in pairs(Players:GetPlayers()) do
        if player ~= LocalPlayer and player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
            table.insert(validPlayers, player)
        end
    end
    return validPlayers
end

-- Update player list
local function updatePlayerList()
    for _, child in pairs(Config.UI.PlayerListFrame:GetChildren()) do
        if child:IsA("TextButton") then child:Destroy() end
    end
    
    local validPlayers = getValidPlayers()
    
    for i, player in pairs(validPlayers) do
        local playerBtn = Instance.new("TextButton")
        playerBtn.Size = UDim2.new(1, -4, 0, 20)
        playerBtn.BackgroundColor3 = (Config.CurrentTarget == player) and Color3.fromRGB(50, 120, 200) or Color3.fromRGB(40, 40, 45)
        playerBtn.Text = player.DisplayName
        playerBtn.TextColor3 = Color3.fromRGB(255, 255, 255)
        playerBtn.TextSize = 9
        playerBtn.Font = Enum.Font.Gotham
        playerBtn.Parent = Config.UI.PlayerListFrame
        
        local btnCorner = Instance.new("UICorner")
        btnCorner.CornerRadius = UDim.new(0, 3)
        btnCorner.Parent = playerBtn
        
        playerBtn.MouseButton1Click:Connect(function()
            Config.CurrentTarget = player
            Config.TargetIndex = i
            updatePlayerList()
        end)
    end
    
    Config.UI.PlayerListFrame.CanvasSize = UDim2.new(0, 0, 0, #validPlayers * 21)
end

-- Camera rotation with mouse/touch
local function setupCameraControls()
    -- Mouse rotation
    UserInputService.InputBegan:Connect(function(input, processed)
        if not Config.Enabled or processed then return end
        
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Config.IsRotating = true
            Config.LastInputPos = input.Position
        end
    end)
    
    UserInputService.InputChanged:Connect(function(input, processed)
        if not Config.Enabled then return end
        
        -- Mouse wheel zoom
        if input.UserInputType == Enum.UserInputType.MouseWheel then
            Config.CameraDistance = math.clamp(Config.CameraDistance - input.Position.Z * 2, Config.MinZoom, Config.MaxZoom)
        end
        
        -- Mouse rotation
        if Config.IsRotating and input.UserInputType == Enum.UserInputType.MouseMovement then
            local delta = input.Position - Config.LastInputPos
            Config.CameraAngleY = Config.CameraAngleY - delta.X * Config.MouseSensitivity
            Config.CameraAngleX = math.clamp(Config.CameraAngleX - delta.Y * Config.MouseSensitivity, -1.4, 1.4)
            Config.LastInputPos = input.Position
        end
    end)
    
    UserInputService.InputEnded:Connect(function(input)
        if input.UserInputType == Enum.UserInputType.MouseButton1 then
            Config.IsRotating = false
        end
    end)
    
    -- Touch controls
    UserInputService.TouchStarted:Connect(function(touch, processed)
        if not Config.Enabled or processed then return end
        Config.TouchPoints[touch] = touch.Position
    end)
    
    UserInputService.TouchMoved:Connect(function(touch, processed)
        if not Config.Enabled or processed then return end
        
        local activeTouches = {}
        for t, pos in pairs(Config.TouchPoints) do
            if t.UserInputState ~= Enum.UserInputState.End then
                table.insert(activeTouches, {touch = t, startPos = pos})
            end
        end
        
        -- Single touch rotation
        if #activeTouches == 1 then
            local delta = touch.Position - Config.TouchPoints[touch]
            Config.CameraAngleY = Config.CameraAngleY - delta.X * Config.TouchSensitivity
            Config.CameraAngleX = math.clamp(Config.CameraAngleX - delta.Y * Config.TouchSensitivity, -1.4, 1.4)
            Config.TouchPoints[touch] = touch.Position
        
        -- Pinch zoom
        elseif #activeTouches >= 2 then
            local touch1 = activeTouches[1].touch
            local touch2 = activeTouches[2].touch
            local currentDist = (touch1.Position - touch2.Position).Magnitude
            
            if not Config.InitialPinchDist then
                Config.InitialPinchDist = currentDist
                Config.InitialZoomDist = Config.CameraDistance
            else
                local scale = Config.InitialPinchDist / currentDist
                Config.CameraDistance = math.clamp(Config.InitialZoomDist * scale, Config.MinZoom, Config.MaxZoom)
            end
        end
    end)
    
    UserInputService.TouchEnded:Connect(function(touch, processed)
        Config.TouchPoints[touch] = nil
        
        local hasActive = false
        for t, _ in pairs(Config.TouchPoints) do
            if t.UserInputState ~= Enum.UserInputState.End then
                hasActive = true
                break
            end
        end
        
        if not hasActive then
            Config.InitialPinchDist = nil
            Config.InitialZoomDist = nil
        end
    end)
end

-- Smooth camera update
local function updateCamera()
    if not Config.Enabled or not Config.CurrentTarget then return end
    
    local target = Config.CurrentTarget
    if not target.Character or not target.Character:FindFirstChild("HumanoidRootPart") then return end
    
    -- Smooth interpolation
    Config.CurrentAngleX = Config.CurrentAngleX + (Config.CameraAngleX - Config.CurrentAngleX) * Config.SmoothFactor
    Config.CurrentAngleY = Config.CurrentAngleY + (Config.CameraAngleY - Config.CurrentAngleY) * Config.SmoothFactor
    Config.CurrentDistance = Config.CurrentDistance + (Config.CameraDistance - Config.CurrentDistance) * Config.SmoothFactor
    
    local targetPos = target.Character.HumanoidRootPart.Position
    
    -- Calculate camera position
    local camX = math.cos(Config.CurrentAngleY) * math.cos(Config.CurrentAngleX) * Config.CurrentDistance
    local camY = math.sin(Config.CurrentAngleX) * Config.CurrentDistance
    local camZ = math.sin(Config.CurrentAngleY) * math.cos(Config.CurrentAngleX) * Config.CurrentDistance
    
    local camPos = targetPos + Vector3.new(camX, camY, camZ)
    Camera.CFrame = CFrame.lookAt(camPos, targetPos)
end

-- Switch player
local function switchPlayer(direction)
    local validPlayers = getValidPlayers()
    if #validPlayers == 0 then return end
    
    Config.TargetIndex = Config.TargetIndex + direction
    if Config.TargetIndex > #validPlayers then 
        Config.TargetIndex = 1
    elseif Config.TargetIndex < 1 then 
        Config.TargetIndex = #validPlayers 
    end
    
    Config.CurrentTarget = validPlayers[Config.TargetIndex]
    updatePlayerList()
end

-- Reset camera
local function resetCamera()
    Config.CameraAngleX = 0
    Config.CameraAngleY = 0
    Config.CameraDistance = 10
    Config.CurrentAngleX = 0
    Config.CurrentAngleY = 0
    Config.CurrentDistance = 10
end

-- Toggle spectate
local function toggleSpectate()
    Config.Enabled = not Config.Enabled
    
    if Config.Enabled then
        Config.UI.ToggleBtn.Text = "Disable Spectate"
        Config.UI.ToggleBtn.BackgroundColor3 = Color3.fromRGB(200, 80, 80)
        
        local validPlayers = getValidPlayers()
        if #validPlayers > 0 and not Config.CurrentTarget then
            Config.CurrentTarget = validPlayers[1]
            Config.TargetIndex = 1
        end
        
        Camera.CameraType = Enum.CameraType.Scriptable
        resetCamera()
    else
        Config.UI.ToggleBtn.Text = "Enable Spectate"
        Config.UI.ToggleBtn.BackgroundColor3 = Color3.fromRGB(50, 120, 200)
        
        Camera.CameraType = Enum.CameraType.Custom
        if LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
            Camera.CameraSubject = LocalPlayer.Character.Humanoid
        end
    end
    
    updatePlayerList()
end

-- Toggle minimize
local function toggleMinimize()
    Config.IsMinimized = not Config.IsMinimized
    
    local targetSize = Config.IsMinimized and UDim2.new(0, 180, 0, 24) or UDim2.new(0, 180, 0, 220)
    local tween = TweenService:Create(Config.UI.MainFrame, TweenInfo.new(0.2, Enum.EasingStyle.Quad), {Size = targetSize})
    tween:Play()
    
    Config.UI.MinimizeBtn.Text = Config.IsMinimized and "+" or "‚Äì"
    Config.UI.ContentFrame.Visible = not Config.IsMinimized
end

-- Close GUI
local function closeGUI()
    if Config.Enabled then toggleSpectate() end
    
    for _, connection in pairs(Config.Connections) do
        if connection then connection:Disconnect() end
    end
    
    if Config.UI.ScreenGui then Config.UI.ScreenGui:Destroy() end
end

-- Initialize
local function initialize()
    local ui = createGUI()
    
    makeDraggable(ui.MainFrame, ui.TitleBar)
    setupCameraControls()
    
    ui.MinimizeBtn.MouseButton1Click:Connect(toggleMinimize)
    ui.CloseBtn.MouseButton1Click:Connect(closeGUI)
    ui.ToggleBtn.MouseButton1Click:Connect(toggleSpectate)
    ui.PrevBtn.MouseButton1Click:Connect(function() switchPlayer(-1) end)
    ui.NextBtn.MouseButton1Click:Connect(function() switchPlayer(1) end)
    ui.ResetBtn.MouseButton1Click:Connect(resetCamera)
    
    Config.Connections[#Config.Connections + 1] = RunService.RenderStepped:Connect(updateCamera)
    
    spawn(function()
        while Config.UI.ScreenGui and Config.UI.ScreenGui.Parent do
            wait(2)
            updatePlayerList()
        end
    end)
    
    updatePlayerList()
    
    print("‚úÖ Warpah Spectate Pro v5.3 Loaded!")
    print("üì± MOBILE: Drag 1 finger = Rotate | Pinch = Zoom")
    print("üñ±Ô∏è PC: Hold & Drag = Rotate | Scroll = Zoom")
end

-- Keyboard shortcuts
UserInputService.InputBegan:Connect(function(input, processed)
    if processed then return end
    
    if input.KeyCode == Enum.KeyCode.F then
        toggleSpectate()
    elseif input.KeyCode == Enum.KeyCode.N and Config.Enabled then
        switchPlayer(1)
    elseif input.KeyCode == Enum.KeyCode.P and Config.Enabled then
        switchPlayer(-1)
    elseif input.KeyCode == Enum.KeyCode.R and Config.Enabled then
        resetCamera()
    end
end)

initialize()
