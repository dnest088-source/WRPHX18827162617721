local Players = game:GetService("Players")
local TweenService = game:GetService("TweenService")
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local player = Players.LocalPlayer

local speedBoost, normalSpeed = 100, 16
local jumpBoost, normalJump = 180, 50
local isSpeedOn, isJumpOn = false, false
local isMinimized = false

local screenGui = Instance.new("ScreenGui")
screenGui.Name = "SpeedJumpGui"
screenGui.ResetOnSpawn = false
screenGui.Parent = player:WaitForChild("PlayerGui")

-- Main Frame Container
local mainFrame = Instance.new("Frame")
mainFrame.Name = "MainFrame"
mainFrame.Size = UDim2.new(0, 200, 0, 100)
mainFrame.Position = UDim2.new(0, 20, 1, -120)
mainFrame.BackgroundColor3 = Color3.fromRGB(0, 0, 0)
mainFrame.Parent = screenGui

local mainCorner = Instance.new("UICorner", mainFrame)
mainCorner.CornerRadius = UDim.new(0, 8)

local mainStroke = Instance.new("UIStroke", mainFrame)
mainStroke.Thickness = 2
mainStroke.Color = Color3.fromRGB(0, 255, 0)
mainStroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border

-- Title Bar
local titleBar = Instance.new("Frame")
titleBar.Name = "TitleBar"
titleBar.Size = UDim2.new(1, 0, 0, 22)
titleBar.Position = UDim2.new(0, 0, 0, 0)
titleBar.BackgroundColor3 = Color3.fromRGB(20, 20, 20)
titleBar.Parent = mainFrame

local titleCorner = Instance.new("UICorner", titleBar)
titleCorner.CornerRadius = UDim.new(0, 8)

local titleLabel = Instance.new("TextLabel")
titleLabel.Name = "TitleLabel"
titleLabel.Size = UDim2.new(1, -55, 1, 0)
titleLabel.Position = UDim2.new(0, 5, 0, 0)
titleLabel.BackgroundTransparency = 1
titleLabel.TextColor3 = Color3.new(1, 1, 1)
titleLabel.Font = Enum.Font.GothamBold
titleLabel.TextScaled = true
titleLabel.Text = "Speed P & Jump P"
titleLabel.TextXAlignment = Enum.TextXAlignment.Left
titleLabel.Parent = titleBar

-- Content Frame
local contentFrame = Instance.new("Frame")
contentFrame.Name = "ContentFrame"
contentFrame.Size = UDim2.new(1, 0, 1, -22)
contentFrame.Position = UDim2.new(0, 0, 0, 22)
contentFrame.BackgroundTransparency = 1
contentFrame.Parent = mainFrame

local function createStyledButton(name, position, color, text)
	local button = Instance.new("TextButton")
	button.Name = name
	button.Size = UDim2.new(0, 65, 0, 25)
	button.Position = position
	button.BackgroundColor3 = color
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.Gotham
	button.TextScaled = true
	button.Text = text
	button.AutoButtonColor = false
	button.Parent = contentFrame

	Instance.new("UICorner", button).CornerRadius = UDim.new(0, 5)
	local stroke = Instance.new("UIStroke", button)
	stroke.Thickness = 1.5
	stroke.Color = Color3.fromRGB(0, 255, 0)
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	return button
end

local function createMiniButton(name, position, text)
	local button = Instance.new("TextButton")
	button.Name = name
	button.Size = UDim2.new(0, 22, 0, 22)
	button.Position = position
	button.BackgroundColor3 = Color3.fromRGB(30, 30, 30)
	button.TextColor3 = Color3.new(1, 1, 1)
	button.Font = Enum.Font.Gotham
	button.TextScaled = true
	button.Text = text
	button.AutoButtonColor = false
	button.Parent = contentFrame
	
	Instance.new("UICorner", button).CornerRadius = UDim.new(0, 4)
	local stroke = Instance.new("UIStroke", button)
	stroke.Thickness = 1
	stroke.Color = Color3.fromRGB(0, 255, 0)
	stroke.ApplyStrokeMode = Enum.ApplyStrokeMode.Border
	return button
end

local function createLabel(name, position, text)
	local label = Instance.new("TextLabel")
	label.Name = name
	label.Size = UDim2.new(0, 30, 0, 25)
	label.Position = position
	label.BackgroundTransparency = 1
	label.TextColor3 = Color3.new(1, 1, 1)
	label.Font = Enum.Font.Gotham
	label.TextScaled = true
	label.Text = text
	label.Parent = contentFrame
	return label
end

-- Close Button
local closeButton = Instance.new("TextButton")
closeButton.Name = "CloseButton"
closeButton.Size = UDim2.new(0, 22, 0, 18)
closeButton.Position = UDim2.new(1, -24, 0, 2)
closeButton.BackgroundColor3 = Color3.fromRGB(170, 0, 0)
closeButton.TextColor3 = Color3.new(1, 1, 1)
closeButton.Font = Enum.Font.GothamBold
closeButton.TextScaled = true
closeButton.Text = "×"
closeButton.AutoButtonColor = false
closeButton.Parent = titleBar

Instance.new("UICorner", closeButton).CornerRadius = UDim.new(0, 4)

-- Minimize Button
local minimizeButton = Instance.new("TextButton")
minimizeButton.Name = "MinimizeButton"
minimizeButton.Size = UDim2.new(0, 22, 0, 18)
minimizeButton.Position = UDim2.new(1, -48, 0, 2)
minimizeButton.BackgroundColor3 = Color3.fromRGB(255, 165, 0)
minimizeButton.TextColor3 = Color3.new(1, 1, 1)
minimizeButton.Font = Enum.Font.GothamBold
minimizeButton.TextScaled = true
minimizeButton.Text = "−"
minimizeButton.AutoButtonColor = false
minimizeButton.Parent = titleBar

Instance.new("UICorner", minimizeButton).CornerRadius = UDim.new(0, 4)

-- Draggable Variables
local dragging = false
local dragStart = nil
local startPos = nil

-- Make GUI Draggable
titleBar.InputBegan:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = true
		dragStart = input.Position
		startPos = mainFrame.Position
		screenGui.DisplayOrder = 10
	end
end)

UserInputService.InputChanged:Connect(function(input)
	if dragging and input.UserInputType == Enum.UserInputType.MouseMovement then
		local delta = input.Position - dragStart
		mainFrame.Position = UDim2.new(startPos.X.Scale, startPos.X.Offset + delta.X, startPos.Y.Scale, startPos.Y.Offset + delta.Y)
	end
end)

UserInputService.InputEnded:Connect(function(input)
	if input.UserInputType == Enum.UserInputType.MouseButton1 then
		dragging = false
		screenGui.DisplayOrder = 0
	end
end)

-- FIX: Improved button animation with proper cleanup
local activeAnimations = {}

local function animateButton(button)
	-- Cancel any existing animation for this button
	if activeAnimations[button] then
		activeAnimations[button]:Cancel()
	end
	
	local tweenInfo = TweenInfo.new(0.1, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	local originalSize = UDim2.new(button.Size.X.Scale, button.Size.X.Offset, button.Size.Y.Scale, button.Size.Y.Offset)
	
	local scaleUp = TweenService:Create(button, tweenInfo, { 
		Size = UDim2.new(originalSize.X.Scale, originalSize.X.Offset + 3, originalSize.Y.Scale, originalSize.Y.Offset + 3) 
	})
	
	local scaleDown = TweenService:Create(button, tweenInfo, { 
		Size = originalSize 
	})
	
	activeAnimations[button] = scaleUp
	
	scaleUp:Play()
	scaleUp.Completed:Connect(function()
		activeAnimations[button] = scaleDown
		scaleDown:Play()
		scaleDown.Completed:Connect(function()
			-- Ensure button returns to exact original size
			button.Size = originalSize
			activeAnimations[button] = nil
		end)
	end)
end

local function updateSpeed()
	local char = player.Character
	if char and char:FindFirstChild("Humanoid") then
		char.Humanoid.WalkSpeed = isSpeedOn and speedBoost or normalSpeed
	end
end

local function updateJump()
	local char = player.Character
	if char and char:FindFirstChild("Humanoid") then
		local h = char.Humanoid
		h.UseJumpPower = true
		h.JumpPower = isJumpOn and jumpBoost or normalJump
		pcall(function() h.JumpHeight = h.JumpPower / 3.2 end)
	end
end

-- SPEED UI
local speedButton = createStyledButton("SpeedButton", UDim2.new(0, 5, 0, 8), Color3.fromRGB(170, 0, 0), "Speed OFF")
local speedLabel = createLabel("SpeedLabel", UDim2.new(0, 75, 0, 8), tostring(speedBoost))
local speedPlus = createMiniButton("SpeedPlus", UDim2.new(0, 110, 0, 9.5), "+")
local speedMinus = createMiniButton("SpeedMinus", UDim2.new(0, 137, 0, 9.5), "-")

local function updateSpeedButton()
	speedButton.BackgroundColor3 = isSpeedOn and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
	speedButton.Text = isSpeedOn and "Speed ON" or "Speed OFF"
	speedLabel.Text = tostring(speedBoost)
end

speedButton.MouseButton1Click:Connect(function()
	isSpeedOn = not isSpeedOn
	updateSpeed()
	updateSpeedButton()
	animateButton(speedButton)
end)

speedPlus.MouseButton1Click:Connect(function()
	speedBoost = math.min(speedBoost + 5, 300)
	if isSpeedOn then updateSpeed() end
	updateSpeedButton()
	animateButton(speedPlus)
end)

speedMinus.MouseButton1Click:Connect(function()
	speedBoost = math.max(speedBoost - 5, 16)
	if isSpeedOn then updateSpeed() end
	updateSpeedButton()
	animateButton(speedMinus)
end)

-- JUMP UI
local jumpButton = createStyledButton("JumpButton", UDim2.new(0, 5, 0, 42), Color3.fromRGB(170, 0, 0), "Jump OFF")
local jumpLabel = createLabel("JumpLabel", UDim2.new(0, 75, 0, 42), tostring(jumpBoost))
local jumpPlus = createMiniButton("JumpPlus", UDim2.new(0, 110, 0, 43.5), "+")
local jumpMinus = createMiniButton("JumpMinus", UDim2.new(0, 137, 0, 43.5), "-")

local function updateJumpButton()
	jumpButton.BackgroundColor3 = isJumpOn and Color3.fromRGB(0, 170, 0) or Color3.fromRGB(170, 0, 0)
	jumpButton.Text = isJumpOn and "Jump ON" or "Jump OFF"
	jumpLabel.Text = tostring(jumpBoost)
end

jumpButton.MouseButton1Click:Connect(function()
	isJumpOn = not isJumpOn
	updateJump()
	updateJumpButton()
	animateButton(jumpButton)
end)

jumpPlus.MouseButton1Click:Connect(function()
	jumpBoost = math.min(jumpBoost + 10, 500)
	if isJumpOn then updateJump() end
	updateJumpButton()
	animateButton(jumpPlus)
end)

jumpMinus.MouseButton1Click:Connect(function()
	jumpBoost = math.max(jumpBoost - 10, 50)
	if isJumpOn then updateJump() end
	updateJumpButton()
	animateButton(jumpMinus)
end)

-- Close Button Function
closeButton.MouseButton1Click:Connect(function()
	animateButton(closeButton)
	task.wait(0.1)
	screenGui:Destroy()
end)

-- Minimize/Maximize Function
minimizeButton.MouseButton1Click:Connect(function()
	animateButton(minimizeButton)
	isMinimized = not isMinimized
	
	local tweenInfo = TweenInfo.new(0.3, Enum.EasingStyle.Quad, Enum.EasingDirection.Out)
	
	if isMinimized then
		-- Minimize
		local minimizeTween = TweenService:Create(mainFrame, tweenInfo, {
			Size = UDim2.new(0, 200, 0, 22)
		})
		minimizeTween:Play()
		minimizeButton.Text = "+"
		contentFrame.Visible = false
	else
		-- Maximize
		local maximizeTween = TweenService:Create(mainFrame, tweenInfo, {
			Size = UDim2.new(0, 200, 0, 100)
		})
		maximizeTween:Play()
		minimizeButton.Text = "−"
		contentFrame.Visible = true
	end
end)

-- Anti Fall Damage
local antiFallConnection = nil

local function applyAntiFallDamage(char)
	local hum = char:WaitForChild("Humanoid")
	local hrp = char:WaitForChild("HumanoidRootPart")

	hum:SetStateEnabled(Enum.HumanoidStateType.FallingDown, false)
	hum:SetStateEnabled(Enum.HumanoidStateType.Physics, false)
	hum:SetStateEnabled(Enum.HumanoidStateType.Ragdoll, false)

	for _, v in pairs(char:GetDescendants()) do
		if v:IsA("Script") or v:IsA("LocalScript") then
			if string.lower(v.Name):find("falldamage") then
				v:Destroy()
			end
		end
	end

	-- Disconnect previous connection if exists
	if antiFallConnection then
		antiFallConnection:Disconnect()
	end

	antiFallConnection = RunService.Heartbeat:Connect(function()
		if hum and hum.Parent and hrp and hrp.Parent then
			if hum:GetState() == Enum.HumanoidStateType.Freefall then
				if hrp.Velocity.Y < -80 then
					hrp.Velocity = Vector3.new(hrp.Velocity.X, -40, hrp.Velocity.Z)
				end
			end
		end
	end)
end

-- FIX: Proper character respawn handling - turn OFF cheats when dying
player.CharacterAdded:Connect(function(char)
	-- Turn OFF both cheats when respawning
	isSpeedOn = false
	isJumpOn = false
	
	-- Wait for Humanoid to load
	local hum = char:WaitForChild("Humanoid")
	
	-- Update UI to show OFF state
	updateSpeedButton()
	updateJumpButton()
	
	-- Apply normal values first
	updateSpeed()
	updateJump()
	
	-- Apply anti fall damage
	applyAntiFallDamage(char)
end)

-- Handle initial character
if player.Character and player.Character:FindFirstChild("Humanoid") then
	isSpeedOn = false
	isJumpOn = false
	updateSpeed()
	updateJump()
	updateSpeedButton()
	updateJumpButton()
	applyAntiFallDamage(player.Character)
end

-- Periodic jump update (in case it gets reset)
task.spawn(function()
	while true do
		task.wait(2)
		if isJumpOn then
			updateJump()
		end
	end
end)
